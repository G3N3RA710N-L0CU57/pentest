#!/usr/bin/python3

# Create a string of characters
import argparse
import datetime

class FuzzString():
    """String functionality to create a string for fuzzing."""

    def __init__(self, structure, output=False, output_file=False, bad_char=False, output_file_bytes=False):
        self.structure = structure
        self.string_payload = ""
        self.bad_chars = ""
        self.create_string()
        if(bad_char): self.bad_character()
        if(output): print(self.string_payload)
        if(output_file): self.print_file()
        if(output_file_bytes): self.file_bytes()

    def create_string(self):
        """Create the string"""
        char_list = self.structure.split(',')
        for char_set in char_list:
            chars = char_set.split(':')
            char = chars[0]
            num = int(chars[1])
            self.string_payload += (char * num)

    @property
    def payload(self):
        return self.string_payload

    def print_file(self):
        """Print string output to file"""
        with open('payload-' + datetime.datetime.now().strftime('%d-%m-%Y-%H:%M:%S') + '.txt', 'w') as file:
            file.write(self.string_payload)

    def file_bytes(self):
        """Output to file in bytes"""
        self.payload_encoded = bytes(self.string_payload, 'UTF-8')
        with open('payload-' + datetime.datetime.now().strftime('%d-%m-%Y-%H:%M:%S') + '.txt', 'wb')as file:
            file.write(self.payload_encoded)

    def bad_character(self):
        """Create and add bad chars to the fuzz string"""
        for i in range(1, 256):
            self.bad_chars += hex(i).replace("0x","\\x")
        self.string_payload += self.bad_chars

def main():
    """Main function"""
parser = argparse.ArgumentParser()
parser.add_argument("string_structure", help="List of chars and number of occurences. usage A:5,B:3,C:1 will output AAAAABBBC")
parser.add_argument("-o", "--output", help="prints output", action="store_true")
parser.add_argument("-oF", "--outputFile", help="output to text file", action="store_true")
parser.add_argument("-bC", "--badchar", help="append bad chars to end of string", action="store_true")
parser.add_argument("-oB", "--outputByte", help="bytes file", action="store_true")
args = parser.parse_args()
fuzz_obj = FuzzString(args.string_structure, args.output, args.outputFile, args.badchar, args.outputByte)

if __name__ == "__main__":
    main()
